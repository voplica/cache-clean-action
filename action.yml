# Copyright 2025 Voplica LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Voplica Cache Clean'
description: 'An Action to trigger cache clean for self-hosted cache used by self-hosted GitHub runners at Voplica'
branding:
  icon: 'trash-2'
  color: 'gray-dark'

inputs:
  dispatch_token:
    description: 'Token for workflow dispatch. Should be: `$GH_BUILDS_WORKFLOW_DISPATCH_TOKEN`'
    required: true
  gh_hosted_token:
    description: 'Token for GitHub hosted Cache to clean up. Should be: `$GITHUB_TOKEN`'
    required: false
    default: ''
  dispatch_url:
    description: 'URL for the workflow dispatch.'
    default: 'https://api.github.com/repos/voplica/builds/actions/workflows/cache_cleanup.yaml/dispatches'

runs:
  using: "composite"
  steps:

    # Step 1: Extract the branch name based on the event
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "delete" ]]; then
          echo "branch=${{ github.event.ref }}" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "branch_archived" ]]; then
          echo "branch=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
        else
          echo "Unknown event; exiting."
          exit 1
        fi

    # Step 2: Debug information
    - name: Debug Info
      shell: bash
      run: |
        echo "Triggered by: ${{ github.event_name }}"
        echo "Branch to clean: ${{ env.branch }}"

    # Step 3: Trigger cache cleanup for a branch
    - name: Send workflow dispatch event
      shell: bash
      run: | 
        ## Do not fail if API is not available
        set +e
        curl -L \
          -X POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'Authorization: Bearer ${{ inputs.dispatch_token }}' \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          '${{ inputs.dispatch_url }}' \
          -d '{"ref":"main","inputs":{"repository":"${{ github.repository }}","branch":"${{ env.branch }}"}}'

    # Step 4: Clean-up GitHub hosted cache
    - name: GitHub hosted cache cleanup
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh_hosted_token }}
        GH_REPO: ${{ github.repository }}
      run: | 
        ## Setting this to not fail the workflow while deleting cache keys.
        set +e
        
        branches=('${{ env.branch }}')
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          pr_ref="refs/pull/${{ github.event.pull_request.number }}/merge"
          branches+=("$pr_ref")
        fi
        echo "Branches for cache removal: ${branches[@]}"
        
        for branch in "${branches[@]}"; do
          echo "Cleaning up GitHub hosted cache for: $branch"
          
          echo "Fetching list of cache key for branch: ${branch}"
          cacheKeysForBranch=$(gh cache list --ref '${{ env.branch }}' --limit 1000 --json id --jq '.[].id')
        
          echo "Deleting GitHub caches..."
          for cacheKey in $cacheKeysForBranch
          do
              gh cache delete $cacheKey
          done
        
          echo "Removed ${#cacheKeysForBranch[@]} GitHub keys for a branch ${{ env.branch }}"
        done
        echo "Finished removing GitHub hosted cache entries"
